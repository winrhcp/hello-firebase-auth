{"version":3,"sources":["logo.svg","firebase/config.js","firebase/index.js","component/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","config","auth","Login","setSession","useState","username","setUsername","password","setPassword","handleLogin","a","signInWithEmailAndPassword","response","user","isLoggedIn","currentUser","errorMassage","handleRegister","createUserWithEmailAndPassword","className","type","name","onChange","event","target","value","onClick","App","errorMessage","session","useEffect","handleAuth","onAuthStateChanged","src","logo","alt","email","href","rel","signOut","then","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,kC,kNCW1BC,G,MAXM,CACnBC,OAAQ,0CACRC,WAAY,4CACZC,YAAa,mDACbC,UAAW,4BACXC,cAAe,wCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBCJdC,IAASC,KAAKC,QACfF,IAASG,cAAcC,GAGVJ,UAASK,O,uBCoEXC,EAzED,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACEC,mBAAS,IADX,mBACvBC,EADuB,KACbC,EADa,OAEEF,mBAAS,IAFX,mBAEvBG,EAFuB,KAEbC,EAFa,KAGxBC,EAAW,uCAAG,8BAAAC,EAAA,+EAEWT,EAAKU,2BAA2BN,EAAUE,GAFrD,OAENK,EAFM,OAGJC,EAASD,EAATC,KAERV,EAAW,CACPW,YAAY,EACZC,YAAaF,IAPL,gDAUZV,EAAW,CACPW,YAAY,EACZE,aAAc,KAAMA,eAZZ,yDAAH,qDAgBXC,EAAc,uCAAG,8BAAAP,EAAA,+EAEQT,EAAKiB,+BAA+Bb,EAAUE,GAFtD,OAETK,EAFS,OAGPC,EAASD,EAATC,KAERV,EAAW,CACPW,YAAY,EACZC,YAAaF,IAPF,gDAUfV,EAAW,CACPW,YAAY,EACZE,aAAc,KAAMA,eAZT,yDAAH,qDAsBpB,OACI,6BAASG,UAAU,qBACnB,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,SACb,2BAAOA,UAAU,SAAjB,SACA,yBAAKA,UAAU,WACb,2BAAOA,UAAU,QAAQC,KAAK,QAAQC,KAAK,QAAQC,SAb1C,SAAAC,GACnBjB,EAAYiB,EAAMC,OAAOC,YAgBnB,yBAAKN,UAAU,SACb,2BAAOA,UAAU,SAAjB,YACA,yBAAKA,UAAU,WACb,2BAAOA,UAAU,QAAQC,KAAK,WAAWC,KAAK,WAAWC,SAjBhD,SAAAC,GACnBf,EAAYe,EAAMC,OAAOC,YAoBnB,yBAAKN,UAAU,oBACb,yBAAKA,UAAU,WACb,4BAAQA,UAAU,iBAAiBO,QAASjB,GAA5C,YAEF,yBAAKU,UAAU,WACb,4BAAQA,UAAU,iBAAiBO,QAAST,GAA5C,kBCRHU,MApDf,WAAgB,IAAD,EACiBvB,mBAAS,CACrCU,YAAY,EACZC,YAAa,KACba,aAAc,OAJH,mBACNC,EADM,KACG1B,EADH,KA4Bb,OAtBA2B,qBAAU,WACR,IAAMC,EAAa9B,EAAK+B,oBAAmB,SAAAnB,GACtCA,GACDV,EAAW,CACTW,YAAY,EACZC,YAAaF,OAKnB,OAAO,WACLkB,OAED,IAUD,yBAAKZ,UAAU,OAGXU,EAAQf,WAAc,4BAAQK,UAAU,cACxC,yBAAKc,IAAKC,IAAMf,UAAU,WAAWgB,IAAI,SACzC,sCACWN,EAAQd,aAAec,EAAQd,YAAYqB,OAEtD,uBACEjB,UAAU,WACVkB,KAAK,sBACLb,OAAO,SACPc,IAAI,uBAJN,eAOI,6BAZkB,IAYR,4BAAQlB,KAAK,SAASM,QAxBrB,WACnBzB,EAAKsC,UAAUC,MAAK,SAAA5B,GAClBT,EAAW,CACTW,YAAY,EACZC,YAAa,YAoBC,WACF,kBAAC,EAAD,CAAOZ,WAAYA,MCxCnBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAAAc,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.967c26f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const firebaseConfig = {\r\n    apiKey: \"AIzaSyD60MHv20y0Dkpmut8N2xFDIjN2Oe4Ofjc\",\r\n    authDomain: \"hello-firebase-auth-4eda0.firebaseapp.com\",\r\n    databaseURL: \"https://hello-firebase-auth-4eda0.firebaseio.com\",\r\n    projectId: \"hello-firebase-auth-4eda0\",\r\n    storageBucket: \"hello-firebase-auth-4eda0.appspot.com\",\r\n    messagingSenderId: \"826260099641\",\r\n    appId: \"1:826260099641:web:5fa1d73ec33bdb7661f3e8\",\r\n    measurementId: \"G-RK2JXJD1PM\"\r\n  };\r\n\r\n  export default firebaseConfig;","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\n\r\nimport config from './config';\r\nif (!firebase.apps.length) {\r\n    firebase.initializeApp(config)\r\n  }\r\n\r\n  export default firebase.auth();","import React, { useState } from 'react';\r\nimport auth from '../firebase'\r\n\r\nconst Login = ({ setSession }) => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const handleLogin = async () => {\r\n        try {\r\n            const response = await auth.signInWithEmailAndPassword(username, password);\r\n            const { user } = response;\r\n\r\n            setSession({\r\n                isLoggedIn: true,\r\n                currentUser: user\r\n            });\r\n        } catch (error) {\r\n            setSession({\r\n                isLoggedIn: false,\r\n                errorMassage: error.errorMassage\r\n            });\r\n        }\r\n    }\r\n    const handleRegister = async () => {\r\n        try {\r\n            const response = await auth.createUserWithEmailAndPassword(username, password);\r\n            const { user } = response;\r\n\r\n            setSession({\r\n                isLoggedIn: true,\r\n                currentUser: user\r\n            });\r\n        } catch (error) {\r\n            setSession({\r\n                isLoggedIn: false,\r\n                errorMassage: error.errorMassage\r\n            });\r\n        }\r\n    }\r\n    const handleUsername = event => {\r\n        setUsername(event.target.value)\r\n    }\r\n    const handlePassword = event => {\r\n        setPassword(event.target.value)\r\n    }\r\n    return (\r\n        <section className=\"section container\">\r\n        <div className=\"columns is-centered\">\r\n          <div className=\"column is-half\">\r\n              <div className=\"field\">\r\n                <label className=\"label\">Email</label>\r\n                <div className=\"control\">\r\n                  <input className=\"input\" type=\"email\" name=\"email\" onChange={handleUsername} />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"field\">\r\n                <label className=\"label\">Password</label>\r\n                <div className=\"control\">\r\n                  <input className=\"input\" type=\"password\" name=\"password\" onChange={handlePassword} />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"field is-grouped\">\r\n                <div className=\"control\">\r\n                  <button className=\"button is-link\" onClick={handleLogin} >Sign In</button>\r\n                </div>\r\n                <div className=\"control\">\r\n                  <button className=\"button is-link\" onClick={handleRegister} >Register</button>\r\n                </div>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport auth from './firebase';\nimport Login from './component/Login';\n\nfunction App() {\n  const [session, setSession] = useState({\n    isLoggedIn: false,\n    currentUser: null,\n    errorMessage: null\n  });\n  useEffect(() => {\n    const handleAuth = auth.onAuthStateChanged(user => {\n      if(user){\n        setSession({\n          isLoggedIn: true,\n          currentUser: user\n        });\n      }\n    });\n\n    return () => {\n      handleAuth(); \n    }\n  }, [])\n  const handleLogout = () => {\n    auth.signOut().then(response => {\n      setSession({\n        isLoggedIn: false,\n        currentUser: null\n      });\n    });\n  }\n  return (\n    <div className=\"App\">\n\n      {\n        session.isLoggedIn ? (<header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          HELLO!, {session.currentUser && session.currentUser.email}\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a><br></br> <button type=\"button\" onClick={handleLogout}>Logout</button>\n      </header>) : (<Login setSession={setSession} />)\n      }\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}